<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="PictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        bgGAJdlhh/8HO/JKZj8XwlQAAAAASUVORK5CYII=
</value>
  </data>
</root>